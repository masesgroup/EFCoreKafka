# This is a basic workflow to help you get started with Actions

name: CI_BUILD

# Controls when the action will run. Triggers the workflow on push
# events but only for the master branch
on:
  push:
    # only trigger on branches, not on tags
    branches: '**'
    
# This workflow contains two jobs called "check_changes", "build_windows"
jobs:
  # Verify if a build is needed
  check_changes:
    name: Check changed files
    outputs:
      run_build_windows: ${{ steps.check_files.outputs.run_build_windows }}
    runs-on: ubuntu-latest
    steps:
      - id: get_changed_files
        uses: masesgroup/retrieve-changed-files@v3
        with:
          format: 'csv'
      - id: check_files
        run: |
          mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.get_changed_files.outputs.added_modified }}')
          for added_modified_file in "${added_modified_files[@]}"; do
              if [[ $added_modified_file == ".github/workflows/build.yaml"* ]]; then
                echo "$added_modified_file is myself."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "src/net/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "test/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
          done
      - name: Get run_build_windows
        run: echo "The selected run_build_windows is ${{ steps.check_files.outputs.run_build_windows }}"

  # Now run "build_windows"
  build_windows:
    needs: check_changes
    if: "always() && needs.check_changes.outputs.run_build_windows == 'true'"
    # The type of runner that the job will run on
    runs-on: windows-2022

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:   
      # Runs a set of commands using the runners shell
      # Support longpaths
      - name: Support long paths
        run: git config --system core.longpaths true
    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: '1'
          submodules: 'true'

      - name: Recompile to create nuget packages
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" src\net\KEFCore.sln

      - uses: actions/upload-artifact@v4
        with:
          name: KEFCore
          path: .\bin\*nupkg

      - name: Compile tests
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" test\KEFCore.Test.sln

      - name: Save KEFCore bin in cache
        uses: actions/cache/save@v4
        with:
          enableCrossOsArchive: true
          path: ./bin/
          key: KEFCore_bin_${{ github.sha }}
          
  execute_tests:
    needs: build_windows
    services:
      kafka:
        # Private registry image
        image: ghcr.io/masesgroup/knet:master # to be changed with official version when willbe available
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - 9092:9092
        env:
          KNET_RUNNING_MODE: server
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
          
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest' ] #, 'macos-latest', 'macos-13' , 'windows-latest' ]
        framework: [ 'net462', 'net6.0', 'net8.0' ]
        jdk_vendor: [ 'temurin', 'zulu', 'microsoft', 'corretto', 'oracle']
        jdk_version: [ '11', '17', '21' ] # only LTS versions
        exclude:
          - os: ubuntu-latest
            framework: net462
          - os: macos-latest
            framework: net462
          - os: macos-latest
            framework: net6.0
          - os: macos-13
            framework: net462
          - os: macos-13
            framework: net6.0
          - jdk_vendor: oracle
            jdk_version: 11
        
    runs-on: ${{ matrix.os }}
    steps:
      - name: Restore KEFCore bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: ./bin/
          key: KEFCore_bin_${{ github.sha }}
 
      - name: Set up JDK distribution
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: ${{ matrix.jdk_vendor }}
          java-version: ${{ matrix.jdk_version }}
 
      - name: Executing MASES.EntityFrameworkCore.KNet.Test.Benchmark on Ubuntu with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }}
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' || matrix.os == 'macos-13' }}
        run: dotnet ./bin/${{ matrix.framework }}/MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ./bin/${{ matrix.framework }}/Benchmark.KNetStreams.json localhost:9092
        env:
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
        
      - name: Executing MASES.EntityFrameworkCore.KNet.Test.Benchmark on Windows with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }}
        if: ${{ matrix.os == 'windows-latest' && matrix.framework != 'net462' }}
        run: dotnet .\bin\${{ matrix.framework }}\MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll .\bin\${{ matrix.framework }}\Benchmark.KNetStreams.json localhost:9092
        env:
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
          
      - name: Executing MASES.EntityFrameworkCore.KNet.Test.Benchmark on Windows with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }}
        if: ${{ matrix.os == 'windows-latest' && matrix.framework == 'net462' }}
        run: .\bin\${{ matrix.framework }}\MASES.EntityFrameworkCore.KNet.Test.Benchmark.exe .\bin\${{ matrix.framework }}\Benchmark.KNetStreams.json localhost:9092
        env:
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}